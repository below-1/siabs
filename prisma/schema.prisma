// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusKerja {
  WorkFromHome
  WorkFromOffice
  DinasLuar
}

model Login {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  expiredAt DateTime
  token String

  user User @relation(fields: [userId], references: [id])
  userId Int
}

model User {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  username        String
  password        String
  isSuperAdmin  Boolean @default(false)
  pegawai         Pegawai?
  loginList Login[]
}

model Pegawai {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  nama            String
  nip             String?
  nik             String
  avatar          String?
  isAdminUnitKerja Boolean  @default(false)
  user  User @relation(fields: [userId], references: [id])
  userId Int
  unitKerja       UnitKerja @relation(fields: [unitKerjaId], references: [id])
  unitKerjaId       Int
  createdJadwalList Jadwal[] @relation("CreatedJadwal")
  jadwalList Jadwal[] @relation("JadwalPegawai")
}

model UnitKerja {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  nama            String
  alamat String
  avatar String?
  latitude  String?
  longitude String?

  pegawaiList  Pegawai[]
  jadwalList Jadwal[]
}

model Jadwal {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  createdBy Pegawai @relation("CreatedJadwal", fields: [createdById], references: [id])
  createdById Int 

  pegawai Pegawai @relation("JadwalPegawai", fields: [pegawaiId], references: [id])
  pegawaiId Int

  unitKerja UnitKerja @relation(fields: [unitKerjaId], references: [id])
  unitKerjaId Int

  absen Absen?

  waktu  DateTime @db.Date()
  jam  DateTime @db.Time()
  status StatusKerja
  closed  Boolean @default(false)
}

model Absen {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  jadwal Jadwal @relation(fields: [jadwalId], references: [id])
  jadwalId Int
  
  waktu  DateTime @db.Date()
  jam  DateTime @db.Time()
  latitude String
  longitude String
}
